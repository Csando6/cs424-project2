#filtered <- filter(tbldata, lat > 41.84 & lon < -87.80 & lon > -87.83) #updated (check later)
filtered <- subset(litdata, lat > 41.84 & lon < -87.80 & lon > -87.83)
#plot a map using lat and long
library(ggplot2)
map_plot <- ggplot(filtered, aes(x=lon, y=lat)) + geom_point(color="black")
#dates
library(lubridate)
newDate <- ymd_hms(filtered$litterTimestamp)   #ex: 2020-01-07 22:14:20 UTC
date <- date(newDate)                          #only hours
hour <- hour(newDate)
weekday <- weekdays(newDate)
filtered$date <- date       #add new data to table
filtered$hour <- hour       #add new data to table
filtered$weekday <- weekday
filtered$litterTimestamp <- NULL   #remove old data from table
#show plot: time vs lat
ggplot(filtered, aes(x=date, y=lat)) + geom_point(color="blue")
ggplot(filtered, aes(x=date, y=lat-41.9)) + geom_line(color="red") + geom_line(aes(y=lon+87.8, color="blue")) #try something
#install.packages("leaflet")
library(leaflet)
litmap <- leaflet(filtered) %>%
addTiles() %>%
addCircles(lng = filtered$lon, lat = filtered$lat, color = "blue")
litmap
#interesting:
#ggplot(filtered, aes(x=newDate, y=challengeId)) + geom_point(color="blue") +  labs(title="my titulor", x="date", y = "challenge IDD") + geom_line()
#ggplot(filtered, aes(x=newDate, y=litterjoinId)) + geom_point(color="blue") +  labs(title="my titulor", x="date", y = "litterjoinId") + geom_line()
#bar charts
#by user:
ggplot(filtered, aes(x=factor(username)))  + geom_bar(stat="count", width=0.7, fill="steelblue")
#goal:
#NOTE: factor use:
# 1) ?
# 2) doesn't matter
# 3) no
#over time:
ggplot(filtered, aes(x=factor(date))) + labs(title="Amount of Litter Picked Over Time", x="date", y = "amount per day") + geom_bar(stat="count", width=0.7, fill="steelblue")
#weekday:
ggplot(filtered, aes(x=factor(weekday))) + labs(title="Amount of Litter Picked by Day of The Week", x="day", y = "amount per day") + geom_bar(stat="count", width=0.7, fill="steelblue")
#hour
ggplot(filtered, aes(x=hour)) + labs(title="Amount of Litter Picked by Hour of The Day", x="hour", y = "amount per hour") + geom_bar(stat="count", width=0.7, fill="steelblue")
# get top 10 pickers:
occurences <-table(unlist(filtered$username))         #get frequency of each and convert df to table
top10pickers <- sort(occurences, decreasing=T)[1:10] #sort and get top 10
class(newDate)
test <- as.POSIXct(newDate)
test
strftime(test, format="%H")
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
rsconnect::setAccountInfo(name='mjanko5',
+   token='DFD12DD2630E03B6BA3F88A92044C738',
+   secret='2RjVa8eFZmY/qFzO725xK6+EwGN/Q31oLpBvOqkI')
rsconnect::setAccountInfo(name='mjanko5', token='DFD12DD2630E03B6BA3F88A92044C73',secret='2RjVa8eFZmY/qFzO725xK6+EwGN/Q31oLpBvOqkI')
rsconnect::setAccountInfo(name='mjanko5',
token='DFD12DD2630E03B6BA3F88A92044C738',
secret='2RjVa8eFZmY/qFzO725xK6+EwGN/Q31oLpBvOqkI')
library(rsconnect)
View(filtered)
rsconnect::deployApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
rsconnect::deployApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
rsconnect::setAccountInfo(name='mjanko5',
token='DFD12DD2630E03B6BA3F88A92044C738',
secret='2RjVa8eFZmY/qFzO725xK6+EwGN/Q31oLpBvOqkI')
library(rsconnect)
rsconnect::deployApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
shiny::runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
?addCircles
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
length(which(numbers==x))
length(which(filtered$username=='julieta'))
length(which(filtered$username=='serenity'))
# get top 10 pickers (method 2):
pickerFreq <- as.data.frame(table(filtered$username)) #get frequency of each but save as a df
top10pickers <- head(pickerFreq[order(-pickerFreq$Freq),], 10) #sort and get top 10
top10pickers
subset <- subset(filtered, filtered$username == 'julieta')
head(subset)
numberPerUser = length(subset)
nummerPerUser
numberPerUser
head(subset)
subset
?length
length(subset)
subset
nrow(subset)
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp()
shiny::runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
?infoBoxOutput
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp()
?inforBox
?infoBox
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
?select
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
# get top 10 pickers (method 2):
pickerFreq <- as.data.frame(table(filtered$username)) #get frequency of each but save as a df
litdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati challenge-65.csv", sep = ",", header = TRUE)
#library(dplyr)
#tbldata <- tbl_df(litdata)  #create a new table tbldata for dplyr
##filter the locations that are out of bounds
#filtered <- filter(tbldata, lat > 41.84 & lon < -87.80 & lon > -87.83) #updated (check later)
filtered <- subset(litdata, lat > 41.84 & lon < -87.80 & lon > -87.83)
#plot a map using lat and long
library(ggplot2)
map_plot <- ggplot(filtered, aes(x=lon, y=lat)) + geom_point(color="black")
#dates
library(lubridate)
newDate <- ymd_hms(filtered$litterTimestamp)   #ex: 2020-01-07 22:14:20 UTC
date <- date(newDate)                          #only hours
hour <- hour(newDate)
weekday <- weekdays(newDate)
filtered$date <- date       #add new data to table
filtered$hour <- hour       #add new data to table
filtered$weekday <- weekday
filtered$litterTimestamp <- NULL   #remove old data from table
#show plot: time vs lat
ggplot(filtered, aes(x=date, y=lat)) + geom_point(color="blue")
ggplot(filtered, aes(x=date, y=lat-41.9)) + geom_line(color="red") + geom_line(aes(y=lon+87.8, color="blue")) #try something
#install.packages("leaflet")
library(leaflet)
litmap <- leaflet(filtered) %>%
addTiles() %>%
addCircles(lng = filtered$lon, lat = filtered$lat, color = "blue")
litmap
#interesting:
#ggplot(filtered, aes(x=newDate, y=challengeId)) + geom_point(color="blue") +  labs(title="my titulor", x="date", y = "challenge IDD") + geom_line()
#ggplot(filtered, aes(x=newDate, y=litterjoinId)) + geom_point(color="blue") +  labs(title="my titulor", x="date", y = "litterjoinId") + geom_line()
#bar charts
#by user:
ggplot(filtered, aes(x=factor(username)))  + geom_bar(stat="count", width=0.7, fill="steelblue")
#goal:
#NOTE: factor use:
# 1) ?
# 2) doesn't matter
# 3) no
#over time:
ggplot(filtered, aes(x=factor(date))) + labs(title="Amount of Litter Picked Over Time", x="date", y = "amount per day") + geom_bar(stat="count", width=0.7, fill="steelblue")
#weekday:
ggplot(filtered, aes(x=factor(weekday))) + labs(title="Amount of Litter Picked by Day of The Week", x="day", y = "amount per day") + geom_bar(stat="count", width=0.7, fill="steelblue")
#hour
ggplot(filtered, aes(x=hour)) + labs(title="Amount of Litter Picked by Hour of The Day", x="hour", y = "amount per hour") + geom_bar(stat="count", width=0.7, fill="steelblue")
# get top 10 pickers:
occurences <-table(unlist(filtered$username))         #get frequency of each and convert df to table
top10pickers <- sort(occurences, decreasing=T)[1:10] #sort and get top 10
# get top 10 pickers (method 2):
pickerFreq <- as.data.frame(table(filtered$username)) #get frequency of each but save as a df
top10pickers <- head(pickerFreq[order(-pickerFreq$Freq),], 10) #sort and get top 10
litdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati challenge-65.csv", sep = ",", header = TRUE)
#library(dplyr)
#tbldata <- tbl_df(litdata)  #create a new table tbldata for dplyr
##filter the locations that are out of bounds
#filtered <- filter(tbldata, lat > 41.84 & lon < -87.80 & lon > -87.83) #updated (check later)
filtered <- subset(litdata, lat > 41.84 & lon < -87.80 & lon > -87.83)
#plot a map using lat and long
library(ggplot2)
map_plot <- ggplot(filtered, aes(x=lon, y=lat)) + geom_point(color="black")
#dates
library(lubridate)
newDate <- ymd_hms(filtered$litterTimestamp)   #ex: 2020-01-07 22:14:20 UTC
date <- date(newDate)                          #only hours
hour <- hour(newDate)
weekday <- weekdays(newDate)
filtered$date <- date       #add new data to table
filtered$hour <- hour       #add new data to table
filtered$weekday <- weekday
filtered$litterTimestamp <- NULL   #remove old data from table
#show plot: time vs lat
ggplot(filtered, aes(x=date, y=lat)) + geom_point(color="blue")
ggplot(filtered, aes(x=date, y=lat-41.9)) + geom_line(color="red") + geom_line(aes(y=lon+87.8, color="blue")) #try something
#install.packages("leaflet")
library(leaflet)
litmap <- leaflet(filtered) %>%
addTiles() %>%
addCircles(lng = filtered$lon, lat = filtered$lat, color = "blue")
litmap
#interesting:
#ggplot(filtered, aes(x=newDate, y=challengeId)) + geom_point(color="blue") +  labs(title="my titulor", x="date", y = "challenge IDD") + geom_line()
#ggplot(filtered, aes(x=newDate, y=litterjoinId)) + geom_point(color="blue") +  labs(title="my titulor", x="date", y = "litterjoinId") + geom_line()
#bar charts
#by user:
ggplot(filtered, aes(x=factor(username)))  + geom_bar(stat="count", width=0.7, fill="steelblue")
#goal:
#NOTE: factor use:
# 1) ?
# 2) doesn't matter
# 3) no
#over time:
ggplot(filtered, aes(x=factor(date))) + labs(title="Amount of Litter Picked Over Time", x="date", y = "amount per day") + geom_bar(stat="count", width=0.7, fill="steelblue")
#weekday:
ggplot(filtered, aes(x=factor(weekday))) + labs(title="Amount of Litter Picked by Day of The Week", x="day", y = "amount per day") + geom_bar(stat="count", width=0.7, fill="steelblue")
#hour
ggplot(filtered, aes(x=hour)) + labs(title="Amount of Litter Picked by Hour of The Day", x="hour", y = "amount per hour") + geom_bar(stat="count", width=0.7, fill="steelblue")
# get top 10 pickers:
occurences <-table(unlist(filtered$username))         #get frequency of each and convert df to table
top10pickers <- sort(occurences, decreasing=T)[1:10] #sort and get top 10
# get top 10 pickers (method 2):
pickerFreq <- as.data.frame(table(filtered$username)) #get frequency of each but save as a df
top10pickers <- head(pickerFreq[order(-pickerFreq$Freq),], 10) #sort and get top 10
View(pickerFreq)
View(top10pickers)
add_row(top10pickers)
rowsum(top10pickers)
?sample
top10pickers[11] = c("All", colSums(y[,2]))
top10pickers[11] = c("All", colSums(top10pickers[,2]))
class(top10pickers)
c("All", colSums(top10pickers[,2]))
colSums(top10pickers[,2])
top10pickers[,2]
sum(colSums)
sum(top10pickers[,2])
top10pickers[11] = c("All", nrows(filtered))
top10pickers[11] = c("All", nrow(filtered))
c("All", nrow(filtered))
rbind(top10pickers, c("All", nrow(filtered)))
rbind(top10pickers, c('All', nrow(filtered)))
rbind(top10pickers, c('All', nrow(filtered), stringsAsFactors = FALSE ))
rbind(top10pickers, c('All', nrow(filtered)), stringsAsFactors = FALSE )
rbind(top10pickers, c('All', nrow(filtered)), stringsAsFactors = FALSE )
c("All", nrow(filtered))
newrow = c("All", nrow(filtered))
neworw
newrow
newrow = list("All", nrow(filtered))
newrow
rbind(top10pickers, c("All", nrow(filtered)))
class('julieta')
class(var1)
class(Var1)
top10pickers[1,1]
top10pickers[2,1]
class(top10pickers[2,1])
class("All")
as.factor("All")
a <- as.factor("All")
a
class(a)
rbind(top10pickers, c(as.factor("All"), nrow(filtered)))
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
# get top 10 pickers (method 2):
pickerFreq <- as.data.frame(table(filtered$username)) #get frequency of each but save as a df
# get top 10 pickers (method 2):
pickerFreq <- as.data.frame(table(filtered$username))
# get top 10 pickers (method 2):
pickerFreq <- as.data.frame(table(filtered$date))
View(filtered)
View(pickerFreq)
shiny::runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
dateFreq
litdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati challenge-65.csv", sep = ",", header = TRUE)
#library(dplyr)
#tbldata <- tbl_df(litdata)  #create a new table tbldata for dplyr
##filter the locations that are out of bounds
#filtered <- filter(tbldata, lat > 41.84 & lon < -87.80 & lon > -87.83) #updated (check later)
filtered <- subset(litdata, lat > 41.84 & lon < -87.80 & lon > -87.83)
#plot a map using lat and long
library(ggplot2)
map_plot <- ggplot(filtered, aes(x=lon, y=lat)) + geom_point(color="black")
#dates
library(lubridate)
newDate <- ymd_hms(filtered$litterTimestamp)   #ex: 2020-01-07 22:14:20 UTC
date <- date(newDate)                          #only hours
hour <- hour(newDate)
weekday <- weekdays(newDate)
filtered$date <- date       #add new data to table
filtered$hour <- hour       #add new data to table
filtered$weekday <- weekday
filtered$litterTimestamp <- NULL   #remove old data from table
#show plot: time vs lat
ggplot(filtered, aes(x=date, y=lat)) + geom_point(color="blue")
ggplot(filtered, aes(x=date, y=lat-41.9)) + geom_line(color="red") + geom_line(aes(y=lon+87.8, color="blue")) #try something
#install.packages("leaflet")
library(leaflet)
litmap <- leaflet(filtered) %>%
addTiles() %>%
addCircles(lng = filtered$lon, lat = filtered$lat, color = "blue")
litmap
#interesting:
#ggplot(filtered, aes(x=newDate, y=challengeId)) + geom_point(color="blue") +  labs(title="my titulor", x="date", y = "challenge IDD") + geom_line()
#ggplot(filtered, aes(x=newDate, y=litterjoinId)) + geom_point(color="blue") +  labs(title="my titulor", x="date", y = "litterjoinId") + geom_line()
#bar charts
#by user:
ggplot(filtered, aes(x=factor(username)))  + geom_bar(stat="count", width=0.7, fill="steelblue")
#goal:
#NOTE: factor use:
# 1) ?
# 2) doesn't matter
# 3) no
#over time:
ggplot(filtered, aes(x=factor(date))) + labs(title="Amount of Litter Picked Over Time", x="date", y = "amount per day") + geom_bar(stat="count", width=0.7, fill="steelblue")
#weekday:
ggplot(filtered, aes(x=factor(weekday))) + labs(title="Amount of Litter Picked by Day of The Week", x="day", y = "amount per day") + geom_bar(stat="count", width=0.7, fill="steelblue")
#hour
ggplot(filtered, aes(x=hour)) + labs(title="Amount of Litter Picked by Hour of The Day", x="hour", y = "amount per hour") + geom_bar(stat="count", width=0.7, fill="steelblue")
# get top 10 pickers:
occurences <-table(unlist(filtered$username))         #get frequency of each and convert df to table
top10pickers <- sort(occurences, decreasing=T)[1:10] #sort and get top 10
# get top 10 pickers (method 2):
pickerFreq <- as.data.frame(table(filtered$username)) #get frequency of each but save as a df
top10pickers <- head(pickerFreq[order(-pickerFreq$Freq),], 10) #sort and get top 10
dateFreq <- as.data.frame(table(filtered$date))
dateFreq
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
table(dateFreq, dnn = list("Date")), responseName = "Count")
table(dateFreq, dnn = list("Date"))
View(table(dateFreq, dnn = list("Date")))
View(dateFreq)
table(dateFreq)
View(table(dateFreq))
class(dateFreq)
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
shiny::runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp()
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
shiny::runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
#
# rawdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati%20challenge-65.csv", sep = ",", header = TRUE)
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
#
# head(data)
# data
View(data, 'l')
View(data)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
#
# rawdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati%20challenge-65.csv", sep = ",", header = TRUE)
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
#
# head(data)
# data
getwd()
setwd("C:/Users/Matthew/github/cs424-project2/hurricane_visual")
getwd()
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
#
# rawdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati%20challenge-65.csv", sep = ",", header = TRUE)
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
#
# head(data)
# data
View(data, This My data)
View(data, 'This My data')
View(data)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
#
# rawdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati%20challenge-65.csv", sep = ",", header = TRUE)
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
#
# head(data)
# data
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
#
# rawdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati%20challenge-65.csv", sep = ",", header = TRUE)
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
#
# head(data)
# data
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
#
# rawdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati%20challenge-65.csv", sep = ",", header = TRUE)
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
#
# head(data)
# data
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
#
# rawdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati%20challenge-65.csv", sep = ",", header = TRUE)
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
#
# head(data)
# data
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
#note: the data file to be read here needs to be processed by out Python script first.
#read in datafile
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
#note: the data file to be read here needs to be processed by out Python script first.
#read in datafile
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
View(data)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
#note: the data file to be read here needs to be processed by out Python script first.
#read in datafile
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
View(data)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
#note: the data file to be read here needs to be processed by out Python script first.
#read in datafile
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
View(data)
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
#note: the data file to be read here needs to be processed by out Python script first.
#read in datafile
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
View(data)
