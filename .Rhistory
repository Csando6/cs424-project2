ggplot(filtered, aes(x=hour)) + labs(title="Amount of Litter Picked by Hour of The Day", x="hour", y = "amount per hour") + geom_bar(stat="count", width=0.7, fill="steelblue")
# get top 10 pickers:
occurences <-table(unlist(filtered$username))         #get frequency of each and convert df to table
top10pickers <- sort(occurences, decreasing=T)[1:10] #sort and get top 10
# get top 10 pickers (method 2):
pickerFreq <- as.data.frame(table(filtered$username)) #get frequency of each but save as a df
top10pickers <- head(pickerFreq[order(-pickerFreq$Freq),], 10) #sort and get top 10
litdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati challenge-65.csv", sep = ",", header = TRUE)
#library(dplyr)
#tbldata <- tbl_df(litdata)  #create a new table tbldata for dplyr
##filter the locations that are out of bounds
#filtered <- filter(tbldata, lat > 41.84 & lon < -87.80 & lon > -87.83) #updated (check later)
filtered <- subset(litdata, lat > 41.84 & lon < -87.80 & lon > -87.83)
#plot a map using lat and long
library(ggplot2)
map_plot <- ggplot(filtered, aes(x=lon, y=lat)) + geom_point(color="black")
#dates
library(lubridate)
newDate <- ymd_hms(filtered$litterTimestamp)   #ex: 2020-01-07 22:14:20 UTC
date <- date(newDate)                          #only hours
hour <- hour(newDate)
weekday <- weekdays(newDate)
filtered$date <- date       #add new data to table
filtered$hour <- hour       #add new data to table
filtered$weekday <- weekday
filtered$litterTimestamp <- NULL   #remove old data from table
#show plot: time vs lat
ggplot(filtered, aes(x=date, y=lat)) + geom_point(color="blue")
ggplot(filtered, aes(x=date, y=lat-41.9)) + geom_line(color="red") + geom_line(aes(y=lon+87.8, color="blue")) #try something
#install.packages("leaflet")
library(leaflet)
litmap <- leaflet(filtered) %>%
addTiles() %>%
addCircles(lng = filtered$lon, lat = filtered$lat, color = "blue")
litmap
#interesting:
#ggplot(filtered, aes(x=newDate, y=challengeId)) + geom_point(color="blue") +  labs(title="my titulor", x="date", y = "challenge IDD") + geom_line()
#ggplot(filtered, aes(x=newDate, y=litterjoinId)) + geom_point(color="blue") +  labs(title="my titulor", x="date", y = "litterjoinId") + geom_line()
#bar charts
#by user:
ggplot(filtered, aes(x=factor(username)))  + geom_bar(stat="count", width=0.7, fill="steelblue")
#goal:
#NOTE: factor use:
# 1) ?
# 2) doesn't matter
# 3) no
#over time:
ggplot(filtered, aes(x=factor(date))) + labs(title="Amount of Litter Picked Over Time", x="date", y = "amount per day") + geom_bar(stat="count", width=0.7, fill="steelblue")
#weekday:
ggplot(filtered, aes(x=factor(weekday))) + labs(title="Amount of Litter Picked by Day of The Week", x="day", y = "amount per day") + geom_bar(stat="count", width=0.7, fill="steelblue")
#hour
ggplot(filtered, aes(x=hour)) + labs(title="Amount of Litter Picked by Hour of The Day", x="hour", y = "amount per hour") + geom_bar(stat="count", width=0.7, fill="steelblue")
# get top 10 pickers:
occurences <-table(unlist(filtered$username))         #get frequency of each and convert df to table
top10pickers <- sort(occurences, decreasing=T)[1:10] #sort and get top 10
# get top 10 pickers (method 2):
pickerFreq <- as.data.frame(table(filtered$username)) #get frequency of each but save as a df
top10pickers <- head(pickerFreq[order(-pickerFreq$Freq),], 10) #sort and get top 10
View(pickerFreq)
View(top10pickers)
add_row(top10pickers)
rowsum(top10pickers)
?sample
top10pickers[11] = c("All", colSums(y[,2]))
top10pickers[11] = c("All", colSums(top10pickers[,2]))
class(top10pickers)
c("All", colSums(top10pickers[,2]))
colSums(top10pickers[,2])
top10pickers[,2]
sum(colSums)
sum(top10pickers[,2])
top10pickers[11] = c("All", nrows(filtered))
top10pickers[11] = c("All", nrow(filtered))
c("All", nrow(filtered))
rbind(top10pickers, c("All", nrow(filtered)))
rbind(top10pickers, c('All', nrow(filtered)))
rbind(top10pickers, c('All', nrow(filtered), stringsAsFactors = FALSE ))
rbind(top10pickers, c('All', nrow(filtered)), stringsAsFactors = FALSE )
rbind(top10pickers, c('All', nrow(filtered)), stringsAsFactors = FALSE )
c("All", nrow(filtered))
newrow = c("All", nrow(filtered))
neworw
newrow
newrow = list("All", nrow(filtered))
newrow
rbind(top10pickers, c("All", nrow(filtered)))
class('julieta')
class(var1)
class(Var1)
top10pickers[1,1]
top10pickers[2,1]
class(top10pickers[2,1])
class("All")
as.factor("All")
a <- as.factor("All")
a
class(a)
rbind(top10pickers, c(as.factor("All"), nrow(filtered)))
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
# get top 10 pickers (method 2):
pickerFreq <- as.data.frame(table(filtered$username)) #get frequency of each but save as a df
# get top 10 pickers (method 2):
pickerFreq <- as.data.frame(table(filtered$username))
# get top 10 pickers (method 2):
pickerFreq <- as.data.frame(table(filtered$date))
View(filtered)
View(pickerFreq)
shiny::runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
dateFreq
litdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati challenge-65.csv", sep = ",", header = TRUE)
#library(dplyr)
#tbldata <- tbl_df(litdata)  #create a new table tbldata for dplyr
##filter the locations that are out of bounds
#filtered <- filter(tbldata, lat > 41.84 & lon < -87.80 & lon > -87.83) #updated (check later)
filtered <- subset(litdata, lat > 41.84 & lon < -87.80 & lon > -87.83)
#plot a map using lat and long
library(ggplot2)
map_plot <- ggplot(filtered, aes(x=lon, y=lat)) + geom_point(color="black")
#dates
library(lubridate)
newDate <- ymd_hms(filtered$litterTimestamp)   #ex: 2020-01-07 22:14:20 UTC
date <- date(newDate)                          #only hours
hour <- hour(newDate)
weekday <- weekdays(newDate)
filtered$date <- date       #add new data to table
filtered$hour <- hour       #add new data to table
filtered$weekday <- weekday
filtered$litterTimestamp <- NULL   #remove old data from table
#show plot: time vs lat
ggplot(filtered, aes(x=date, y=lat)) + geom_point(color="blue")
ggplot(filtered, aes(x=date, y=lat-41.9)) + geom_line(color="red") + geom_line(aes(y=lon+87.8, color="blue")) #try something
#install.packages("leaflet")
library(leaflet)
litmap <- leaflet(filtered) %>%
addTiles() %>%
addCircles(lng = filtered$lon, lat = filtered$lat, color = "blue")
litmap
#interesting:
#ggplot(filtered, aes(x=newDate, y=challengeId)) + geom_point(color="blue") +  labs(title="my titulor", x="date", y = "challenge IDD") + geom_line()
#ggplot(filtered, aes(x=newDate, y=litterjoinId)) + geom_point(color="blue") +  labs(title="my titulor", x="date", y = "litterjoinId") + geom_line()
#bar charts
#by user:
ggplot(filtered, aes(x=factor(username)))  + geom_bar(stat="count", width=0.7, fill="steelblue")
#goal:
#NOTE: factor use:
# 1) ?
# 2) doesn't matter
# 3) no
#over time:
ggplot(filtered, aes(x=factor(date))) + labs(title="Amount of Litter Picked Over Time", x="date", y = "amount per day") + geom_bar(stat="count", width=0.7, fill="steelblue")
#weekday:
ggplot(filtered, aes(x=factor(weekday))) + labs(title="Amount of Litter Picked by Day of The Week", x="day", y = "amount per day") + geom_bar(stat="count", width=0.7, fill="steelblue")
#hour
ggplot(filtered, aes(x=hour)) + labs(title="Amount of Litter Picked by Hour of The Day", x="hour", y = "amount per hour") + geom_bar(stat="count", width=0.7, fill="steelblue")
# get top 10 pickers:
occurences <-table(unlist(filtered$username))         #get frequency of each and convert df to table
top10pickers <- sort(occurences, decreasing=T)[1:10] #sort and get top 10
# get top 10 pickers (method 2):
pickerFreq <- as.data.frame(table(filtered$username)) #get frequency of each but save as a df
top10pickers <- head(pickerFreq[order(-pickerFreq$Freq),], 10) #sort and get top 10
dateFreq <- as.data.frame(table(filtered$date))
dateFreq
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
table(dateFreq, dnn = list("Date")), responseName = "Count")
table(dateFreq, dnn = list("Date"))
View(table(dateFreq, dnn = list("Date")))
View(dateFreq)
table(dateFreq)
View(table(dateFreq))
class(dateFreq)
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
shiny::runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp()
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
shiny::runApp('C:/Users/Matthew/Desktop/Project 1/Litterati_Forest_Park')
shiny::runApp('C:/Users/Matthew/github/cs424-project2')
runApp('C:/Users/Matthew/github/cs424-project2')
#read in datafile
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
# Matt Jankowski
# Project 1 - R and Shiny
#libraries to include
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
#FILE READING
#get the data in
rawdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati%20challenge-65.csv", sep = ",", header = TRUE)
#DATE MANIPULATION
#some of the locations are not in Forest Park, so let's get rid of those data points
filtered <- subset(rawdata, lat > 41.84 & lon < -87.80 & lon > -87.83)
#date manipulation
newDate <- ymd_hms(filtered$litterTimestamp)   #ex: 2020-01-07 22:14:20 UTC
newDateChicago <- with_tz(newDate, tzone = "America/Chicago") #convert to CST
date <
date
year = year(data$date)
year(data$date)
shiny::runApp('C:/Users/Matthew/github/cs424-project2')
runApp('C:/Users/Matthew/github/cs424-project2')
runApp('C:/Users/Matthew/github/cs424-project2')
runApp('C:/Users/Matthew/github/cs424-project2')
runApp('C:/Users/Matthew/Desktop/424/Project 1/Litterati_Forest_Park/app_p1.R')
class(justOnePicker$lon)
justOnePicker <- justOnePickerReactive()
runApp('C:/Users/Matthew/Desktop/424/Project 1/Litterati_Forest_Park/app_p1.R')
# Matt Jankowski
# Project 1 - R and Shiny
#libraries to include
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
#FILE READING
#get the data in
rawdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati%20challenge-65.csv", sep = ",", header = TRUE)
#DATE MANIPULATION
#some of the locations are not in Forest Park, so let's get rid of those data points
filtered <- subset(rawdata, lat > 41.84 & lon < -87.80 & lon > -87.83)
#date manipulation
newDate <- ymd_hms(filtered$litterTimestamp)   #ex: 2020-01-07 22:14:20 UTC
newDateChicago <- with_tz(newDate, tzone = "America/Chicago") #convert to CST
date <- date(newDateChicago)                          #only hours
hour <- hour(newDateChicago)
weekday <- weekdays(newDateChicago)
filtered$date <- date       #add new rows to dataframe
filtered$hour <- hour
filtered$weekday <- weekday
filtered$litterTimestamp <- NULL   #remove old data from table
# get top 10 pickers:
pickerFreq <- as.data.frame(table(filtered$username))
top10pickers <- head(pickerFreq[order(-pickerFreq$Freq),], 10)
# top10tags <- TODO
#SHINY DASHBOARD
# Create the shiny dashboard
ui <- dashboardPage(
dashboardHeader(title = "Litterati Forest Park Challenge - Data Analysis"),
dashboardSidebar(disable = FALSE, collapsed = FALSE,
#Sidebar input
selectInput("Picker", "Top 10 Pickers", top10pickers$Var1, selected = 'julieta'),
selectInput("Tag", "Top 10 Tags",
c('plastic', 'paper', 'wrapper', 'bag', 'can', 'candy', 'cigarrette', 'cup', 'soda', 'jar'),
selected = 'plastic')
),
#Body
dashboardBody(
fluidRow(
#left column
column(3,
fluidRow(
infoBoxOutput("progressBox", width = 12)
),
fluidRow(
box(title = "Map of Litter in Forest Park", solidHeader = TRUE, status = "primary", width = 12,
leafletOutput("leaf", height = 600)
)
),
textInput("About", "About: Written by Matt Jankowski; libraries: shiny, ggplot, lubridate; data from litterati.com", placeholder = "Thank you for enjoying!")
),
#middle coulumn (bar graphs)
column(6,
fluidRow(
box( title = "Litter Picked by Date", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("bar1", height = 300)
)
),
fluidRow(
box( title = "Litter Picked by Day of the Week", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("bar2", height = 300)
)
),
fluidRow(
box( title = "Litter Picked by Hour of Day", solidHeader = TRUE, status = "primary", width = 12,
plotOutput("bar3", height = 300)
)
)
# ,
# fluidRow(
#   box( title = "Litter Picked by Category (Tag)", solidHeader = TRUE, status = "primary", width = 12,
#        plotOutput("bar4", height = 300)
#   )
# )
),
#right column (tables)
column(3,
fluidRow(
box(title = "Litter Picked by Date", solidHeader = TRUE, status = "primary", width = 12,
dataTableOutput("table1", height = 300)
)
),
fluidRow(
box(title = "Litter Picked by Day of the Week", solidHeader = TRUE, status = "primary", width = 12,
dataTableOutput("table2", height = 300)
)
),
fluidRow(
box(title = "Litter Picked by Hour of Day", solidHeader = TRUE, status = "primary", width = 12,
dataTableOutput("table3", height = 300)
)
)
# ,
# fluidRow(
#   box(title = "Litter Picked by Category (Tag)", solidHeader = TRUE, status = "primary", width = 12,
#       dataTableOutput("table4", height = 300)
#   )
# )
)
)
))
server <- function(input, output) {
# increase the default font size
theme_set(theme_grey(base_size = 18))
#GET REACTIVE DATA FROM INPUT:
# calculate the values one time and re-use them in multiple charts to speed things up
justOnePickerReactive <- reactive({subset(filtered, filtered$username == input$Picker)}) #contatins just the data about selected picker
# observeEvent(input$Picker, {
#   print(paste0("You have chosen: ", input$Picker))
# })
#PLOT THE DATA:
#info box
output$progressBox <- renderInfoBox({
justOnePicker <- justOnePickerReactive()
numberPerUser = nrow(justOnePicker)
infoBox(
input$Picker, paste0(numberPerUser, " pieces of litter"), icon = icon("leaf"),
color = "green"
)
})
#bar graphs
output$bar1 <- renderPlot({
justOnePicker <- justOnePickerReactive()
ggplot(justOnePicker, aes(x=date)) +
labs(x="Date", y = "Number of Litter Picked") +
geom_bar(stat="count", width=0.7, fill="steelblue") +
scale_x_date(date_breaks = "1 month", date_labels =  "%b %Y", expand = c(0, 0)) +
theme(axis.text.x=element_text(angle=55, hjust=1))
})
output$bar2 <- renderPlot({
justOnePicker <- justOnePickerReactive()
justOnePicker$weekday <- factor(justOnePicker$weekday, weekdays(as.Date('1970-01-03') + 1:7))
ggplot(justOnePicker, aes(x=weekday)) +
labs(x="Weekday", y = "Number of Litter Picked") +
geom_bar(stat="count", width=0.7, fill="steelblue")
})
output$bar3 <- renderPlot({
justOnePicker <- justOnePickerReactive()
ggplot(justOnePicker, aes(x=hour)) +
labs(x="Hour", y = "Number of Litter Picked") +
geom_bar(stat="count", width=0.7, fill="steelblue") +
scale_x_continuous(breaks = 0:24)
})
#add a leaflet map of Forest Park
output$leaf <- renderLeaflet({
justOnePicker <- justOnePickerReactive()
map <- leaflet()
map <- addTiles(map)
map <- setView(map, lng = -87.813, lat = 41.869, zoom = 14)
map <- addCircles(map, lng = justOnePicker$lon, lat = justOnePicker$lat, color = "blue")
map
})
#tables
output$table1 <- DT::renderDataTable(
DT::datatable({
justOnePicker <- justOnePickerReactive()
dateFreq <- as.data.frame(table(justOnePicker$date, dnn = list("Date")), responseName = "Count")
},
options = list(searching = FALSE, pageLength = 4, lengthChange = FALSE
), rownames = FALSE
)
)
output$table2 <- DT::renderDataTable(
DT::datatable({
justOnePicker <- justOnePickerReactive()
justOnePicker$weekday <- factor(justOnePicker$weekday, weekdays(as.Date('1970-01-03') + 1:7))
weekdayFreq <- as.data.frame(table(justOnePicker$weekday, dnn = list("Weekday")), responseName = "Count")
},
options = list(searching = FALSE, pageLength = 7, lengthChange = FALSE, info = FALSE, bPaginate = FALSE
), rownames = FALSE
)
)
output$table3 <- DT::renderDataTable(
DT::datatable({
justOnePicker <- justOnePickerReactive()
hourFreq <- as.data.frame(table(justOnePicker$hour, dnn = list("Hour")), responseName = "Count")
},
options = list(searching = FALSE, pageLength = 5, lengthChange = FALSE
), rownames = FALSE
)
)
}
# shinyApp(ui = ui, server = server)
class(justOnePicker$lon)
wdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati%20challenge-65.csv", sep = ",", header = TRUE)
#DATE MANIPULATION
#some of the locations are not in Forest Park, so let's get rid of those data points
filtered <- subset(rawdata, lat > 41.84 & lon < -87.80 & lon > -87.83)
#date manipulation
newDate <- ymd_hms(filtered$litterTimestamp)   #ex: 2020-01-07 22:14:20 UTC
newDateChicago <- with_tz(newDate, tzone = "America/Chicago") #convert to CST
date <- date(newDateChicago)                          #only hours
hour <- hour(newDateChicago)
weekday <- weekdays(newDateChicago)
filtered$date <- date       #add new rows to dataframe
filtered$hour <- hour
filtered$weekday <- weekday
filtered$litterTimestamp <- NULL   #remove old data from table
# get top 10 pickers:
pickerFreq <- as.data.frame(table(filtered$username))
top10pickers <- head(pickerFreq[order(-pickerFreq$Freq),], 10)
class(justOnePicker$lon)
class(filtered)
class(filtered$lat)
#get the data in
rawdata <- read.table(file = "https://www.evl.uic.edu/aej/424/litterati%20challenge-65.csv", sep = ",", header = TRUE)
class(rawdata)
class(rawdata$lat)
- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
data$d
leaned_hurricane_data.csv', sep = ",", header = TRUE)
data$date <- ymd(data$date
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
data$date <- ymd(data$date)
getwd()
shiny::runApp('C:/Users/Matthew/github/cs424-project2')
setwd("C:/Users/Matthew/github/cs424-project2")
runApp()
runApp()
runApp()
View(data3)
view(data)
#read in datafile
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
View(data)
data$date <- ymd(data$date)
#getting data from 2018 and onwards
data1year <- data[year(data$date)==2018,]  # | year(data$date)<=2011,]
#data1year <- data1year[seq(1, nrow(data1year), 2), ]  #get every other point
#getting data from 2005 and onwards
data2 <- data[year(data$date)>=2005,]
#select columns
data2 <- data2[c(0:2, 4:11)]
#getting code and name of hurricanes, saving max windspeed of hurricane from 2005 and onwards
data3 <- data2 %>% group_by(hur_code,hur_name) %>% summarize(max_speed =max(max_speed))
data3 <- data3[order(data3$hur_name,decreasing = FALSE),]
#getting top 10 hurrican speed
data4 <- data3[order(data3$max_speed, decreasing = TRUE),]
data4 <- data4[1:10,]
#range of hurrican data
data5 <- range(year(data2$date))
View(data)
View(data2)
View(data3)
runApp()
#getting data from 2005 and onwards
data2 <- data[year(data$date)>=2005,]
#getting code and name of hurricanes, saving max windspeed of hurricane from 2005 and onwards
data3 <- data2 %>% group_by(hur_code,hur_name) %>% summarize(max_speed =max(max_speed))
data3 <- data3[order(data3$hur_name,decreasing = FALSE),]
View(data3)
View(data2)
runApp()
library(shiny)
library(shinydashboard)
library(ggplot2)
library(lubridate)
library(DT)
library(jpeg)
library(grid)
library(leaflet)
library(scales)
library(dplyr)
library(plyr)
#note: the data file to be read here needs to be processed by our Python script first.
#read in datafile
data <- read.csv(file = 'cleaned_hurricane_data.csv', sep = ",", header = TRUE)
data$date <- ymd(data$date)
#getting data from 2018 and onwards
data1year <- data[year(data$date)==2018,]  # | year(data$date)<=2011,]
#data1year <- data1year[seq(1, nrow(data1year), 2), ]  #get every other point
#getting data from 2005 and onwards
data2 <- data[year(data$date)>=2005,]
#select columns
data2 <- data2[c(0:2, 4:11)]
#getting code and name of hurricanes, saving max windspeed of hurricane from 2005 and onwards
data3 <- data2 %>% group_by(hur_code,hur_name) %>% summarize(max_speed =max(max_speed))
data3 <- data3[order(data3$hur_name,decreasing = FALSE),]
#getting top 10 hurrican speed
data4 <- data3[order(data3$max_speed, decreasing = TRUE),]
data4 <- data4[1:10,]
#range of hurrican data
data5 <- range(year(data2$date))
View(data3)
runApp()
runApp()
runApp()
shiny::runApp()
